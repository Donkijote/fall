name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: >
      (contains(github.event.pull_request.labels.*.name, 'release/major') ||
       contains(github.event.pull_request.labels.*.name, 'release/minor') ||
       contains(github.event.pull_request.labels.*.name, 'release/patch') ||
       contains(github.event.pull_request.labels.*.name, 'release/current')) &&
      github.event.pull_request.merged == true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Save PR context (number, refs) as artifact
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          jq -n '{
            number: env.NUMBER|tonumber,
            headRef: env.HEAD_REF,
            baseRef: env.BASE_REF
          }' > pr-context.json
        env:
          NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}

      - name: Upload PR context artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: pr-context
          path: pr-context.json
          if-no-files-found: error

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Set up Git
        run: |
          git config user.name "Manuel GonÃ§alves"
          git config user.email "manuelmjgc@gmail.com"

      - name: Get tag version
        id: get_tag
        run: |
          git fetch --tags
          git branch --show-current
          git checkout main
          git pull
          echo "version=v$(pnpm pkg get version | tr -d '\"' | tr -d '\-SNAPSHOT')" >> "$GITHUB_OUTPUT"

      - name: Tag the commit
        run: |
          current_version=${{ steps.get_tag.outputs.version }}
          git tag -a "$current_version" -m "Version $current_version"
          git push --follow-tags

      - name: Create changelog diff
        id: changelog_diff
        run: |
          git fetch --tags
          sed -n "/^## \[${{ steps.get_tag.outputs.version }}\]/,/^## \[$(git describe --abbrev=0 --tags $(git rev-list --tags --max-count=1))\]/{/^## \[$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))\]/!p;}" CHANGELOG.md > release_notes.md

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.get_tag.outputs.version }}
          name: Release ${{ steps.get_tag.outputs.version }}
          bodyFile: release_notes.md
          draft: false
          prerelease: false

      - name: Delete release_notes file
        run: rm release_notes.md
